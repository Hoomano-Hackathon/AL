<?xml version="1.0" encoding="UTF-8" ?><ChoregrapheProject xmlns="http://www.aldebaran-robotics.com/schema/choregraphe/project.xsd" xar_version="3"><Box name="root" id="-1" localization="8" tooltip="Root box of Choregraphe&apos;s behavior. Highest level possible." x="0" y="0"><bitmap>media/images/box/root.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="0"><BehaviorLayer name="behavior_layer1"><BehaviorKeyframe name="keyframe1" index="1"><Diagram><Box name="MemoryGame" id="1" localization="8" tooltip="" x="395" y="229"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Input name="MemG/personanswer" type="0" type_size="1" nature="4" stm_value_name="MemG/personanswer" inner="1" tooltip="MemG/personanswer desc" id="4" /><Input name="MemG/selectedPerson" type="0" type_size="1" nature="4" stm_value_name="MemG/selectedPerson" inner="1" tooltip="MemG/selectedPerson desc" id="5" /><Input name="MemG/talkabout" type="0" type_size="1" nature="4" stm_value_name="MemG/talkabout" inner="1" tooltip="MemG/talkabout desc" id="6" /><Input name="PepperTablet/Reset" type="0" type_size="1" nature="4" stm_value_name="PepperTablet/Reset" inner="1" tooltip="PepperTablet/Reset desc" id="7" /><Input name="MemG/EndApp" type="0" type_size="1" nature="4" stm_value_name="MemG/EndApp" inner="1" tooltip="MemG/EndApp desc" id="8" /><Input name="onMemGAnswerIsRight" type="0" type_size="1" nature="4" stm_value_name="onMemGAnswerIsRight" inner="1" tooltip="onMemGAnswerIsRight desc" id="9" /><Input name="onMemGAnswerIsWrong" type="0" type_size="1" nature="4" stm_value_name="onMemGAnswerIsWrong" inner="1" tooltip="onMemGAnswerIsWrong desc" id="10" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="11" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="-1"><BehaviorLayer name="primary"><BehaviorKeyframe name="init" index="1"><Diagram><Box name="Stop" id="1" localization="8" tooltip="Stop the parent timeline at the current frame index.&#x0A;&#x0A;!!Warning!! This box does not stop the behavior! It is only the timeline which will&#x0A;stop playing, the keyframes and boxes will still be running." x="82" y="39"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onStop(self):
        self.getParentTimeline().pause()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStop" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline stops when a signal is received on this input." id="2" /></Box><Box name="SetupPeople" id="2" localization="8" tooltip="" x="335" y="14"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory = ALProxy("ALMemory")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        self.memory.insertData("MemG/Family","'Alex','Chris','Lydie'")
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Goto start" id="3" localization="8" tooltip="Jump to the frame name set in parameters." x="470" y="65"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" /><Parameter name="Frame name" inherits_from_parent="0" content_type="3" value="start" default_value="" custom_choice="0" tooltip="Name of the frame you want to go to." id="3" /></Box><Box name="Set Language" id="4" localization="8" tooltip="Set the language of your robot for the current application. Your robot will speak and understand the selected language as long as your application has focus. Any following call to ALSpeechRecognition (Speech Reco. box for instance), ALTextToSpeech (Say box for instance) or ALDialog will use this language.&#x0A;" x="96" y="145"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onLoad(self):
        try:
            self.tts = ALProxy("ALTextToSpeech")
        except:
            self.logger.warn("ALTextToSpeech is not available, language setting cannot be applied to speech")
            self.tts = None

        try:
            self.asr = ALProxy("ALSpeechRecognition")
        except:
            self.logger.warn("ALSpeechRecognition is not available, language setting cannot be applied to recognition")
            self.asr = None

        try:
            self.dialog = ALProxy("ALDialog")
        except:
            self.logger.warn("ALDialog is not available, language setting cannot be applied to dialog")
            self.dialog = None

    def onInput_onSet(self):
        lang = self.getParameter("Language")
        try:
            if self.asr:
                self.asr.setLanguage( self.getParameter("Language") )
            if self.tts:
                self.tts.setLanguage( self.getParameter("Language") )
            if self.dialog:
                self.dialog.setLanguage( self.getParameter("Language") )
            if self.tts is None and self.asr is None and self.dialog is None:
                raise RuntimeError("Cannot set language: neither ALTextToSpeech nor ALSpeechRecognition nor ALDialog is available.")
            self.onReady()
        except:
            error = "Language " + lang + " cannot be set."
            self.logger.warn(error)
            self.onError(error)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Output name="onError" type="3" type_size="1" nature="2" inner="0" tooltip="Error output:&#x0A;- triggered if the language asked cannot be set" id="4" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks and understands." id="5"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Box name="Set Reco. Lang." id="5" localization="8" tooltip="Select the language you would like the robot to recognize. Any following call to&#x0A;ALSpeechRecognition (Speech Reco. box for instance) will use this language.&#x0A;&#x0A;V1.1.0" x="100" y="243"><bitmap>media/images/box/interaction/reco_voice.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        try :
            self.asr = ALProxy("ALSpeechRecognition")
        except Exception as e:
            self.asr = None
            self.logger.error(e)

    def onInput_onSet(self):
        if self.asr:
            self.asr.setLanguage( self.getParameter("Language") )
        self.onReady()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot understands." id="4"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech recognition" type="Lock" timeout="0" /></Box><Box name="Set Speech Lang." id="6" localization="8" tooltip="Select the language you would like the robot to speak. Any following call to&#x0A;ALTextToSpeech (Say box for instance) will use this language." x="105" y="345"><bitmap>media/images/box/interaction/say.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)
        self.tts = ALProxy("ALTextToSpeech")

    def onInput_onSet(self):
        self.tts.setLanguage( self.getParameter("Language") )
        self.onReady()]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onSet" type="1" type_size="1" nature="1" inner="0" tooltip="The data is set when a signal is received on this input." id="2" /><Output name="onReady" type="1" type_size="1" nature="2" inner="0" tooltip="Signal sent when the data has been set." id="3" /><Parameter name="Language" inherits_from_parent="0" content_type="3" value="English" default_value="English" custom_choice="1" tooltip="Set the language the robot speaks." id="4"><Choice value="Arabic" /><Choice value="Brazilian" /><Choice value="Chinese" /><Choice value="Czech" /><Choice value="Danish" /><Choice value="Dutch" /><Choice value="English" /><Choice value="Finnish" /><Choice value="French" /><Choice value="German" /><Choice value="Greek" /><Choice value="Italian" /><Choice value="Japanese" /><Choice value="Korean" /><Choice value="MandarinTaiwan" /><Choice value="Norwegian" /><Choice value="Polish" /><Choice value="Portuguese" /><Choice value="Russian" /><Choice value="Spanish" /><Choice value="Swedish" /><Choice value="Turkish" /></Parameter><Resource name="Speech" type="Lock" timeout="0" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="3" indexofinput="2" outputowner="2" indexofoutput="4" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="5" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="6" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="start" index="10"><Diagram><Box name="Wait for WebPage Load FromManifestID" id="12" localization="8" tooltip="Shows the webview (html content) on the tablet.&#x0A;&#x0A;V1.0.0&#x0A;" x="260" y="50"><bitmap>media/images/box/internet/internet.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):

    def __init__(self):
        GeneratedClass.__init__(self)
        self.startConnectId = None
        self.tabletService = None
    def onLoad(self):
        pass

    def onUnload(self):
        self.disconnectStartedListener()
        pass

    def _getTabletService(self):
        self.tabletService = None
        try:
            self.tabletService = self.session().service("ALTabletService")
        except Exception as e:
            self.logger.error(e)
        return self.tabletService

    def onInput_onStart(self):
        # We create TabletService here in order to avoid
        # problems with connections and disconnections of the tablet during the life of the application
        self.tabletService = self._getTabletService()
        if self.tabletService:
            try:
                self.startConnectId = self.tabletService.onPageFinished.connect(self.CallbackTest)
            except Exception as err:
                self.logger.warning("Failed to subscribe to started callback: %s " % err)
                self.onStopped()
            fmPage = ALFrameManager.getBehaviorPath(self.behaviorId)
            BehaviourID = fmPage.split("/apps/")[1].split("/")[0]
            showPage = "http://198.18.0.1/apps/" + BehaviourID + "/" + self.getParameter("url")

            self.logger.info("BehaviourID:" + BehaviourID)
            self.logger.info("Show Webpage:" + showPage)
            self.tabletService.showWebview(showPage)

        else:
            self.logger.warning("ALTabletService not found.")
        pass

    def CallbackTest(self):
        self.logger.info("Callback fired")
        self.disconnectStartedListener()
        self.onPageLoaded()

    def disconnectStartedListener(self):
        if self.startConnectId and self.tabletService:
            try:
                self.tabletService.onPageFinished.disconnect(self.startConnectId)
                self.startConnectId = None
            except Exception as e:
                self.logger.error(e)]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Output name="onPageLoaded" type="1" type_size="1" nature="1" inner="0" tooltip="" id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Parameter name="url" inherits_from_parent="0" content_type="3" value="index.html" default_value="" custom_choice="0" tooltip="" id="5" /></Box><Box name="selectUser" id="1" localization="8" tooltip="" x="95" y="47"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[import random
class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory=ALProxy("ALMemory")


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        familyList = []
        familyList = eval(str(self.memory.getData("MemG/Family")))
        selectedPerson = random.choice(familyList)
        self.memory.insertData("MemG/selectedPerson", str(selectedPerson))
        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="Goto (name)" id="3" localization="8" tooltip="Jump to the frame name set in parameters." x="431" y="53"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" /><Parameter name="Frame name" inherits_from_parent="0" content_type="3" value="game" default_value="" custom_choice="0" tooltip="Name of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /><Link inputowner="12" indexofinput="2" outputowner="1" indexofoutput="4" /><Link inputowner="3" indexofinput="2" outputowner="12" indexofoutput="3" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="game" index="17"><Diagram><Box name="CheckAnswer" id="1" localization="8" tooltip="CheckAnswer" x="194" y="96"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory=ALProxy("ALMemory")


    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self, p):
        personAnswer = str(p)
        personQuestion = str(self.memory.getData("MemG/selectedPerson"))
        if personAnswer == personQuestion:
            self.memory.raiseMicroEvent("onMemGAnswerIsRight", "yes")
        else:
            self.memory.raiseMicroEvent("onMemGAnswerIsWrong", "no")


        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="0" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="TalkAbout" id="2" localization="8" tooltip="" x="198" y="217"><bitmap>media/images/box/box-python-script.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self)
        self.memory=ALProxy("ALMemory")

    def onLoad(self):
        #put initialization code here
        pass

    def onUnload(self):
        #put clean-up code here
        pass

    def onInput_onStart(self):
        personQuestion = str(self.memory.getData("MemG/selectedPerson"))
        self.memory.raiseMicroEvent(self.getEventName(personQuestion), "yes")

        self.onStopped() #activate the output of the box
        pass

    def onInput_onStop(self):
        self.onUnload() #it is recommended to reuse the clean-up as the box is stopped
        self.onStopped() #activate the output of the box

    def getEventName(self, person):
        return {
            "Chris": "onMemGTalkAboutChris",
            "Lydie": "onMemGTalkAboutLydie",
            "Alex": "onMemGTalkAboutAlex",
        }[person]]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Box name="YourRight" id="3" localization="8" tooltip="" x="214" y="341"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="115"><ActuatorList model="Juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="15" value="-7.4707" /><Key frame="53" value="-7.73437" /><Key frame="65" value="-7.73437" /><Key frame="76" value="-40.5" /><Key frame="115" value="-7.4707" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="15" value="3.25195" /><Key frame="53" value="3.33984" /><Key frame="65" value="3.33984" /><Key frame="76" value="2.46093" /><Key frame="115" value="3.25195" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipPitch" mute="0" unit="0"><Key frame="15" value="-7.4707" /><Key frame="53" value="-7.73437" /><Key frame="65" value="-7.73437" /><Key frame="115" value="-7.4707" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="15" value="-0.9668" /><Key frame="53" value="-1.49414" /><Key frame="65" value="-1.49414" /><Key frame="115" value="-0.9668" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="15" value="1.14258" /><Key frame="53" value="0.791018" /><Key frame="65" value="0.791018" /><Key frame="115" value="1.14258" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="15" value="-11.25" /><Key frame="29" value="-71.7188" /><Key frame="41" value="-71.7188" /><Key frame="53" value="-16.5234" /><Key frame="62" value="-71.7188" /><Key frame="65" value="-57.6563" /><Key frame="71" value="-16.6113" /><Key frame="87" value="-71.7188" /><Key frame="100" value="-71.7188" /><Key frame="115" value="-11.25" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="15" value="-82.002" /><Key frame="29" value="-111.27" /><Key frame="41" value="-111.27" /><Key frame="53" value="-101.338" /><Key frame="62" value="-111.27" /><Key frame="65" value="-108.457" /><Key frame="71" value="-100.986" /><Key frame="87" value="-111.27" /><Key frame="100" value="-111.27" /><Key frame="115" value="-82.002" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="15" value="0.501758" /><Key frame="29" value="0.473638" /><Key frame="41" value="0.473638" /><Key frame="53" value="0.468366" /><Key frame="62" value="0.473638" /><Key frame="65" value="0.468366" /><Key frame="71" value="0.463093" /><Key frame="87" value="0.473638" /><Key frame="100" value="0.473638" /><Key frame="115" value="0.501758" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="15" value="92.0215" /><Key frame="29" value="10.2832" /><Key frame="41" value="10.2832" /><Key frame="53" value="-48.8672" /><Key frame="62" value="10.2832" /><Key frame="65" value="-5.36133" /><Key frame="71" value="-49.3066" /><Key frame="87" value="10.2832" /><Key frame="100" value="10.2832" /><Key frame="115" value="92.0215" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="15" value="1.9336" /><Key frame="29" value="32.2559" /><Key frame="41" value="32.2559" /><Key frame="53" value="29.2676" /><Key frame="62" value="32.2559" /><Key frame="65" value="30.5859" /><Key frame="71" value="28.8281" /><Key frame="87" value="32.2559" /><Key frame="100" value="32.2559" /><Key frame="115" value="1.9336" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="15" value="-19.4265" /><Key frame="29" value="0.261268" /><Key frame="41" value="0.261268" /><Key frame="53" value="27.5956" /><Key frame="62" value="0.261268" /><Key frame="65" value="9.13833" /><Key frame="71" value="28.2987" /><Key frame="87" value="0.261268" /><Key frame="100" value="0.261268" /><Key frame="115" value="-19.4265" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="15" value="13.0078" /><Key frame="29" value="64.7754" /><Key frame="41" value="64.7754" /><Key frame="53" value="21.7969" /><Key frame="62" value="64.7754" /><Key frame="65" value="53.4375" /><Key frame="71" value="21.7969" /><Key frame="87" value="64.7754" /><Key frame="100" value="64.7754" /><Key frame="115" value="13.0078" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="15" value="85.3418" /><Key frame="29" value="99.1406" /><Key frame="41" value="99.1406" /><Key frame="53" value="57.3047" /><Key frame="62" value="99.1406" /><Key frame="65" value="87.627" /><Key frame="71" value="56.8652" /><Key frame="87" value="99.1406" /><Key frame="100" value="99.1406" /><Key frame="115" value="85.3418" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="15" value="0.531634" /><Key frame="29" value="0.523726" /><Key frame="41" value="0.523726" /><Key frame="53" value="0.511424" /><Key frame="62" value="0.523726" /><Key frame="65" value="0.511424" /><Key frame="71" value="0.513181" /><Key frame="87" value="0.523726" /><Key frame="100" value="0.523726" /><Key frame="115" value="0.531634" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="15" value="92.5488" /><Key frame="29" value="6.67969" /><Key frame="41" value="6.67969" /><Key frame="53" value="-68.9063" /><Key frame="62" value="6.67969" /><Key frame="65" value="-12.832" /><Key frame="71" value="-69.082" /><Key frame="87" value="6.67969" /><Key frame="100" value="6.67969" /><Key frame="115" value="92.5488" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="15" value="-1.23047" /><Key frame="29" value="-40.0781" /><Key frame="41" value="-40.0781" /><Key frame="53" value="-35.0684" /><Key frame="62" value="-40.0781" /><Key frame="65" value="-38.3203" /><Key frame="71" value="-34.9805" /><Key frame="87" value="-40.0781" /><Key frame="100" value="-40.0781" /><Key frame="115" value="-1.23047" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="15" value="19.5096" /><Key frame="29" value="-3.07861" /><Key frame="41" value="-3.07861" /><Key frame="53" value="-10.0221" /><Key frame="62" value="-3.07861" /><Key frame="65" value="-7.20952" /><Key frame="71" value="-11.0768" /><Key frame="87" value="-3.07861" /><Key frame="100" value="-3.07861" /><Key frame="115" value="19.5096" /></ActuatorCurve></ActuatorList></Timeline></Box><Box name="YourWrong" id="4" localization="8" tooltip="" x="225" y="456"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /><Timeline enable="1" fps="25" start_frame="1" end_frame="-1" size="98"><ActuatorList model="Juliette"><ActuatorCurve name="value" actuator="HeadPitch" mute="0" unit="0"><Key frame="10" value="17.3144" /><Key frame="18" value="35.5078" /><Key frame="35" value="36.2988" /><Key frame="45" value="36.2988" /><Key frame="57" value="35.8594" /><Key frame="79" value="-3.16406" /></ActuatorCurve><ActuatorCurve name="value" actuator="HeadYaw" mute="0" unit="0"><Key frame="10" value="3.60351" /><Key frame="18" value="17.1387" /><Key frame="35" value="-22.9394" /><Key frame="45" value="20.5664" /><Key frame="57" value="-21.8848" /><Key frame="79" value="0" /></ActuatorCurve><ActuatorCurve name="" actuator="HipPitch" mute="0" unit="0"><Key frame="8" value="-1.49414" /><Key frame="27" value="-13.2715" /><Key frame="61" value="-13.2715" /><Key frame="98" value="-1.49414" /></ActuatorCurve><ActuatorCurve name="value" actuator="HipRoll" mute="0" unit="0"><Key frame="8" value="-1.05469" /><Key frame="27" value="-0.527345" /><Key frame="61" value="-0.527345" /><Key frame="98" value="-1.05469" /></ActuatorCurve><ActuatorCurve name="value" actuator="KneePitch" mute="0" unit="0"><Key frame="8" value="0.351564" /><Key frame="27" value="-0.0878909" /><Key frame="61" value="-0.0878909" /><Key frame="98" value="0.351564" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowRoll" mute="0" unit="0"><Key frame="10" value="-22.1484" /></ActuatorCurve><ActuatorCurve name="value" actuator="LElbowYaw" mute="0" unit="0"><Key frame="10" value="-98.7891" /></ActuatorCurve><ActuatorCurve name="value" actuator="LHand" mute="0" unit="1"><Key frame="10" value="0.613357" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderPitch" mute="0" unit="0"><Key frame="10" value="91.8457" /></ActuatorCurve><ActuatorCurve name="value" actuator="LShoulderRoll" mute="0" unit="0"><Key frame="10" value="4.13086" /></ActuatorCurve><ActuatorCurve name="value" actuator="LWristYaw" mute="0" unit="0"><Key frame="10" value="-43.1572" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowRoll" mute="0" unit="0"><Key frame="10" value="13.1836" /></ActuatorCurve><ActuatorCurve name="value" actuator="RElbowYaw" mute="0" unit="0"><Key frame="10" value="98.1738" /></ActuatorCurve><ActuatorCurve name="value" actuator="RHand" mute="0" unit="1"><Key frame="10" value="0.630053" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderPitch" mute="0" unit="0"><Key frame="10" value="91.0547" /></ActuatorCurve><ActuatorCurve name="value" actuator="RShoulderRoll" mute="0" unit="0"><Key frame="10" value="-7.73437" /></ActuatorCurve><ActuatorCurve name="value" actuator="RWristYaw" mute="0" unit="0"><Key frame="10" value="49.0412" /></ActuatorCurve></ActuatorList></Timeline></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="4" /><Link inputowner="2" indexofinput="2" outputowner="0" indexofoutput="6" /><Link inputowner="3" indexofinput="2" outputowner="0" indexofoutput="9" /><Link inputowner="4" indexofinput="2" outputowner="0" indexofoutput="10" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe130" index="130"><Diagram /></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="dialog"><BehaviorKeyframe name="Primary Dialog" index="17"><Diagram><Box name="MemoryGame" id="1" localization="8" tooltip="" x="213" y="65"><dialogFile>../MemoryGame/MemoryGame.dlg</dialogFile><bitmap>media/images/box/box-dialog.png</bitmap><script language="4"><content><![CDATA[]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onStart" type="1" type_size="1" nature="2" inner="0" tooltip="Box behavior starts when a signal is received on this input." id="2" /><Input name="onStop" type="1" type_size="1" nature="3" inner="0" tooltip="Box behavior stops when a signal is received on this input." id="3" /><Output name="onStopped" type="1" type_size="1" nature="1" inner="0" tooltip="Signal sent when box behavior is finished." id="4" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="1" /></Diagram></BehaviorKeyframe><BehaviorKeyframe name="keyframe130" index="130"><Diagram /></BehaviorKeyframe></BehaviorLayer><BehaviorLayer name="Management"><BehaviorKeyframe name="Management" index="17"><Diagram><Box name="Goto (name)" id="1" localization="8" tooltip="Jump to the frame name set in parameters." x="224" y="26"><bitmap>media/images/box/box-timeLine.png</bitmap><script language="4"><content><![CDATA[class MyClass(GeneratedClass):
    def __init__(self):
        GeneratedClass.__init__(self, False)

    def onInput_onGo(self):
        self.getParentTimeline().goTo(self.getParameter("Frame name"))]]></content></script><Input name="onLoad" type="1" type_size="1" nature="0" inner="1" tooltip="Signal sent when diagram is loaded." id="1" /><Input name="onGo" type="1" type_size="1" nature="1" inner="0" tooltip="Parent timeline gotoTimeline when a signal is received on this input." id="2" /><Parameter name="Frame name" inherits_from_parent="0" content_type="3" value="start" default_value="" custom_choice="0" tooltip="Name of the frame you want to go to." id="3" /></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="7" /><Link inputowner="0" indexofinput="11" outputowner="0" indexofoutput="8" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box><Link inputowner="1" indexofinput="2" outputowner="0" indexofoutput="2" /><Link inputowner="0" indexofinput="4" outputowner="1" indexofoutput="11" /></Diagram></BehaviorKeyframe></BehaviorLayer></Timeline></Box></ChoregrapheProject>